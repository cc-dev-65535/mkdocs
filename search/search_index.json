{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome! This guide is all about helping developers to set up a productive working environment in VS Code in Windows. Specifically, you will learn how to set custom key bindings, import and export profiles, and create code snippets.</p> <p>VS Code is a simple yet powerful IDE that many developers use for coding, but may be intimidating to beginners. Following these instructions will help you become a more efficient and productive developer.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>Intermediate level developers who already have some familiarity with the VS Code environment.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>A computer running a Windows operating system</li> <li>VS Code Installation</li> <li>Working knowledge of simple programming concepts like arrays and JSON</li> </ul>"},{"location":"#conventions","title":"Conventions","text":""},{"location":"#actions","title":"Actions","text":"<p>When text is italicized, it indicates an action taken by the user.</p>"},{"location":"#interactions","title":"Interactions","text":"<p>When text is bolded, it indicates something you can interact with. For example, you may click on Confirm.</p>"},{"location":"#sections","title":"Sections","text":"<p>When referring to section headings, they will also be italicized. For example, the section Importing and Exporting Profiles follows this section. </p>"},{"location":"#instructions-overview","title":"Instructions Overview","text":"<p>These instructions will teach you all about  </p> <ul> <li>Setting Custom Key Bindings</li> <li>Importing and Exporting Profiles</li> <li>Making Code Snippets</li> </ul>"},{"location":"code-snippets/","title":"Making Code Snippets","text":""},{"location":"code-snippets/#overview","title":"Overview","text":"<p>Code Snippets are blocks of pre-written code that can be conveniently inserted into code through the IntelliSense shortcut menu. This section will detail how to create your own custom code snippet for any programming language you use in VS Code.  </p>"},{"location":"code-snippets/#instructions","title":"Instructions","text":"<p>1. From the File menu, click Preferences and then click Configure User Snippets.  This will display the snippets file selector popup.  </p> <p>2. Find and select the snippet file of your desired programming language using the search bar.  This will cause the snippet file (a JSON file) of the selected programming language to display in the editor. Code snippets are usually specific to a programming language (i.e., they can only be inserted while coding in that specific language). Optionally, you can make your snippet global for use in all languages by clicking New Global Snippets file....  </p> <p>3. Write your code snippets in the following JSON format below.</p> <pre><code>    \"enumerate list\": {\n        \"prefix\": [\"enumerate\"],\n        \"body\": [\"for index, in enumerate():\\n\\t\"],\n        \"description\": \"make numeric indexes for a list\"\n    }\n</code></pre> <p>In this format, prefix is the specific text that will trigger the IntelliSense shortcut menu where you can select your snippet, body is what will be inserted if the user clicks the snippet shortcut in the IntelliSense shortcut menu, and description is what is displayed alongside the snippet in the IntelliSense shortcut menu. You must also give your snippet a title (e.g., \"enumerate list\" in this example) that is displayed in the IntelliSense shortcut menu.</p> <p>4. Fill out the prefix value with your desired trigger words for the snippet.</p> <pre><code>    ...\n\n    \"prefix\": [\"enumerate\", \"e-list\", \"index-list\"],\n\n    ...\n</code></pre> <p>This will be an array of strings that will cause the snippet shortcut (with the written name) to be displayed in the IntelliSense shortcut menu.</p> <p>5. Fill out the body value with the code snippet that will be inserted when the snippet shortcut is clicked.</p> <pre><code>    ...\n\n    \"body\": [\"for index, ${1:element} in enumerate(${2:list}):\\n\\t\"],\n\n    ...\n</code></pre> <p>Use placeholder values of $1, $2, $3, and so on in ascending order that allow you to tab through positions in the snippet where you can enter initial values when you choose to insert a snippet. The colons after these placeholder values set the default value if you choose not to enter a value at that position. Note that the body value is an array of strings that is joined into a single line when the snippet is inserted.</p> <p>6. Fill out a description value.</p> <pre><code>    ...\n\n    \"description\": \"make numeric indexes for a list\"\n\n    ...\n</code></pre> <p>This text will be displayed alongside the snippet title in the IntelliSense shortcut menu when the snippet shortcut is visible.</p> <p>7. Save and close the JSON file. The code snippets can now be inserted when coding in that programming language.</p> <p>8. Test out your code snippet by creating a file in your selected programming language and typing one of the prefix words you entered previously. You can then select the code snippet with the prefix name from the IntelliSense menu.  The code snippet will be inserted at the cursor position.</p>"},{"location":"code-snippets/#conclusion","title":"Conclusion","text":"<p>You have learned how to create your own code snippets in VS Code. Take a look at some of the other instruction sections to further improve your productivity in VS Code.</p>"},{"location":"glossary/","title":"Glossary of Technical Terms","text":""},{"location":"glossary/#json","title":"JSON","text":"<p>JSON is a data representation format that is common for transferring data between applications. It is used in various applications for commons tasks such as loading configuration files that are stored in disk memory.</p>"},{"location":"glossary/#intellisense","title":"IntelliSense","text":"<p>A catch-all term for VS Code editor features that improve developer experience by providing useful functions such as automatic code completion, type information for parameters and more.</p>"},{"location":"glossary/#array","title":"Array","text":"<p>A programming construct that represents a collection of similar things delineated by commas.</p>"},{"location":"glossary/#code-profile","title":"code-profile","text":"<p>The file extension of profiles that are created by VS Code for importing and exporting.</p>"},{"location":"glossary/#ide","title":"IDE","text":"<p>Stands for integrated development environment, which is a powerful text editor with additional debugging and code compilation capabilities.</p>"},{"location":"importing-exporting/","title":"Importing and Exporting Profiles","text":""},{"location":"importing-exporting/#overview","title":"Overview","text":"<p>In this section you will learn about creating, importing, and exporting user profiles. Profiles allow you to save your settings and extensions into a file. This is helpful when you want to keep them across devices. </p>"},{"location":"importing-exporting/#creating-and-switching-profiles","title":"Creating and Switching Profiles","text":"<p>This section teaches you about creating profiles and switching to them. You will create a blank state profile as part of this process.</p> <p>1. Navigate to File &gt; Preferences &gt; Profiles (Default) on the top bar. </p> <p>2. Click on Create Profile...</p> <p>3. Select Create an Empty Profile...  There is also the option to create a profile from your current settings if you wish.</p> <p>4. Input a name for your profile and press Enter.  Your profile was created, so now you will switch to it to check.</p> <p>5. Follow Step 1. to view the list of profiles.</p> <p>6. Click on the profile with the name you previously entered.  You now know how to create a profile!</p>"},{"location":"importing-exporting/#exporting-a-profile","title":"Exporting a Profile","text":"<p>This section teaches you how to export a profile as a file.</p> <p>1. Navigate to File &gt; Preferences &gt; Profiles (Default). </p> <p>2. Click on Export Profile...</p> <p>3. Select the settings or extensions you want to keep on the menu that appears on the left.  You can modify the exact settings you want inside of the settings.json file.</p> <p>4. Press the Export button when finished.</p> <p>5. Input a name for the profile and press Enter.</p> <p>6. Choose Local file for Export Profile As.  You can also choose to save the file as a GitHub gist, but select Local file for simplicity.</p> <p>7. Select a path where you want to save the file to. </p> <p>8. A success window will pop up when the file is created.  You have now created a code-profile file, which you can share or import at a later time.</p>"},{"location":"importing-exporting/#importing-a-profile","title":"Importing a Profile","text":"<p>This section teaches you to import a profile file that you or someone else may have created.</p> <p>1. Navigate to File &gt; Preferences &gt; Profiles (Default). </p> <p>2. Select Import from profile file.  You can also enter a Gist URL for this step.</p> <p>3. Locate the directory which contains your code-profile file and click open.</p> <p>4. Verify the setting and extensions you want to keep and select Import Profile.  You have now imported the profile with all desired settings and extensions! </p>"},{"location":"importing-exporting/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you will have mastered creating, importing, and exporting profiles. You will also know exactly what is saved inside of a profile file. Continue to the next instruction section to learn more about VS Code.</p>"},{"location":"key-bindings/","title":"Setting Custom Key Bindings","text":""},{"location":"key-bindings/#overview","title":"Overview","text":"<p>These instructions detail how to bind keys to keyboard commands. There are two methods for setting custom key bindings. The first method is more convenient but is harder to use for complex key bindings. In those cases, you should use the second method, which allows for maximum customization by editing key bindings directly from a JSON file that is loaded by VS Code.  </p>"},{"location":"key-bindings/#method-1-keyboard-shortcuts-editor","title":"Method 1: Keyboard Shortcuts Editor","text":"<p>1. From the File menu, click Preferences and then click Keyboard Shortcuts.  This will take you to the keyboard shortcuts editor.</p> <p>2. Search for the key command you want to change by entering the key command's name into the search bar at the top of the editor. Note: For a more convenient option, you can also click the Record Keys icon (highlighted in red below) on the right hand side of the search bar.  The Record Keys option allows you to record key strokes typed into the search bar and search for key commands that are currently bound to those entered key(s).</p> <p>3. Hover over the key command you want to change and click the pencil icon that appears on the left.  This allows you to edit the current key binding.</p> <p>4. Enter your desired key binding combination in the popup that appears and press enter. The pressed key(s) are now bound to the key command. </p>"},{"location":"key-bindings/#method-2-json-file","title":"Method 2: JSON File","text":"<p>1. From the File menu, click Preferences and then click Keyboard Shortcuts.  This will take you to the keyboard shortcuts editor.</p> <p>2. Click the Open Keyboard Shortcuts(JSON) icon from the top right of the shortcut editor.  </p> <p>3. Add your own key bindings in JSON format into the keybindings.json file tab that appears in your editor.  </p> <p>4. Add your key command bindings in the JSON format below.</p> <pre><code>    {\n        \"key\": \"ctrl+p\",\n        \"command\": \"deleteLeft\",\n        \"when\": \"textInputFocus\"\n    }\n</code></pre> <p>In this format, key will take the key you want to bind, command will take the command identifier of the command that the key triggers, and when sets the scope of the key binding while in VS Code and is optional (the default is global editor scope).</p> <p>5. Save and close the JSON file. The key bindings you set can now be used within the editor.</p>"},{"location":"key-bindings/#conclusion","title":"Conclusion","text":"<p>You have learned how to set your own key bindings in VS Code. Take a look at some of the other instruction sections to further improve your productivity in VS Code.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Common Issues","text":""},{"location":"troubleshooting/#i-set-the-wrong-key-binding-and-want-to-revert-it","title":"I set the wrong key binding and want to revert it","text":"<p>From the keyboard shortcut editor you can filter all key bindings by user-defined bindings to list all the key bindings that you have personally set. Click the ... icon in the top right of the shortcut editor and then click Show User Keybindings from the dropdown menu to see the list. From this list you can right click on any user-defined key binding and then remove or reset it. Alternatively, you can edit the JSON file with key bindings directly following method 2 of the Setting Custom Key Bindings section.</p>"},{"location":"troubleshooting/#i-want-to-remove-a-code-snippet-as-it-is-no-longer-useful","title":"I want to remove a code snippet as it is no longer useful","text":"<p>Follow the steps in the Making Code Snippets section to open the snippet file for your desired programming language and simply delete the snippet (a JSON object) you added from this file.</p>"},{"location":"troubleshooting/#i-cant-find-my-desired-key-binding-through-the-keyboard-shortcut-editor","title":"I can't find my desired key binding through the keyboard shortcut editor","text":"<p>If the search function in the keyboard shortcut editor is not helpful for finding a key binding then you should refer to method 2 of the Setting Custom Key Bindings section. This method will work for all possible key bindings in VS Code provided you know what command identifiers to enter into the command clause.</p>"},{"location":"troubleshooting/#i-accidentally-imported-the-wrong-profile","title":"I accidentally imported the wrong profile","text":"<p>You can always reset your current profile to the VS Code default profile through the same menu that you use for importing and exporting profiles.</p>"},{"location":"troubleshooting/#i-set-a-key-binding-but-it-doesnt-work","title":"I set a key binding but it doesn't work","text":"<p>Ensure that your key binding does not conflict with a system-default key binding. If this is the case then using method 2 of the Setting Custom Key Bindings section would allow you to override this default.</p>"}]}